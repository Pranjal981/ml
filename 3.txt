import pandas as pd
data=pd.read_csv('Churn_Modelling.csv')
data.info()
# Drop unnecessary columns and apply encoding in one step
data_processed = pd.get_dummies(data.drop(columns=['CustomerId', 'Surname', 'Exited']), columns=['Geography', 'Gender'], drop_first=True)


# Set X and y
X = data_processed
y = data['Exited']


print(X.head())


from sklearn.model_selection import train_test_split


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


from sklearn.preprocessing import StandardScaler


scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout


# Set up the model
model = Sequential()
model.add(Dense(units=64, activation='relu', input_shape=(X_train.shape[1],)))  # First layer
model.add(Dropout(0.5))  # Dropout to prevent overfitting
model.add(Dense(units=32, activation='relu'))  # Second layer
model.add(Dropout(0.3))
model.add(Dense(units=1, activation='sigmoid'))  # Output layer for binary classification


# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))




from sklearn.metrics import accuracy_score, confusion_matrix


# Make predictions
y_pred = (model.predict(X_test) > 0.5).astype("int32")


# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)


# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)


